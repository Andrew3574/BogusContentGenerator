@model IEnumerable<ContentGeneratorApp.Models.Book>

@{
    Layout = null;
}
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

<head>
    <style>
        .toolbar {
        position: sticky;
        top: 0;
        padding: 20px 10px;
        background-color: white;
        z-index: 10;
        }

        .form-floating > label {
            margin-left: 5px;
        }

        thead th {
        position: sticky;
        top: 90px; 
        background-color: white;
        z-index: 10;
        }
    </style>    

</head>

<body>
    <form method="get">
    
        <div class="container">
            <div class="row mb-3 toolbar">

                <div class="form-floating col-md-3">
                    <select class="form-select" id="floatingSelect" name="language" aria-label="Language">
                        <option value="0" selected>English (US)</option>
                        <option value="1">France (FR)</option>
                        <option value="2">Español (ES)</option>
                    </select>
                    <label for="floatingSelect">Language</label>
                </div>

                <div class="form-floating col-md-3">
                    <input id="seedInput" name="seed" type="text" value="0" class="form-control" placeholder="Seed">
                    <label for="seedInput">Seed</label>
                    <button class="btn btn-sm btn-outline-secondary position-absolute end-0 top-50 translate-middle-y border-0 me-3" type="button" onclick="generateSeed()">
                        <i class="fa fa-random "></i>
                    </button>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Likes</label>
                    <input type="range" name="likes" class="form-range" min="0" max="100" step="1" value="5" />
                </div>

                <div class="form-floating col-md-3">
                    <input type="number" name="reviews" id="floatingReview" class="form-control" placeholder="Review" step="0.1" min="0" max="10" value="0">
                    <label for="floatingReview">Reviews</label>
                </div>

            </div>

            <table class="table" id="booksTable">
                <thead>
                    <tr>
                        <th></th>
                        <th>@Html.DisplayNameFor(model => model.Id)</th>
                        <th>@Html.DisplayNameFor(model => model.Isbn)</th>
                        <th>@Html.DisplayNameFor(model => model.Title)</th>
                        <th>@Html.DisplayNameFor(model => model.Author)</th>
                        <th>@Html.DisplayNameFor(model => model.Publisher)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {

                        <tr>
                            <td>
                                <details>
                                    <summary class="btn btn-sm btn-outline-primary">Details</summary>
                                </details>
                            </td>
                            <td>@Html.DisplayFor(modelItem => item.Id)</td>
                            <td>@Html.DisplayFor(modelItem => item.Isbn)</td>
                            <td>@Html.DisplayFor(modelItem => item.Title)</td>
                            <td>@string.Join(", ", item.Author)</td>
                            <td>@item.Publisher.ToString()</td>
                        </tr>

                        <tr class="details-row" style="display: none;">
                            <td colspan="6" class="p-4">

                                <div class="row mb-3">
                                    <div class="col-md-3 d-flex flex-column align-items-start">
                                        <img src="@item.Image" alt="Cover" style="max-width: 140px;" class="mb-2" />
                                        <div style="margin-left:50px" class="bg-primary p-2 rounded-3 text-center">
                                            <i class="fa fa-thumbs-up text-white"> @item.Likes</i>
                                        </div>
                                    </div>

                                    <div class="col-md-9">
                                        <h3><strong>@item.Title</strong></h3>
                                        <div><strong>by @string.Join(", ", item.Author)</strong></div>
                                        <p>@item.Publisher</p>
                                        <div><strong>Reviews:</strong></div>
                                        <ul>
                                            @foreach (var review in item.Reviews)
                                            {
                                                <li>@review.ToString()</li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            <div id="loading" style="display: none;">Loading...</div>
        </div>
    </form>
    <script src="_framework/aspnetcore-browser-refresh.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script>
        let page = 0;
        let isLoading = false;

         window.addEventListener('scroll', async () => {
            if (isLoading) return;

            if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 200) {
                isLoading = true;
                document.getElementById('loading').style.display = 'block';

                try {
                    page++;
                    const { seed, likes, reviews, language } = getFilterParams();

                    const response = await fetch(`/Books/LoadMore?seed=${seed}&page=${page}&likes=${likes}&reviews=${reviews}&language=${language}`);
                    if (response.ok) {
                        const books = await response.json();
                        appendBooks(books);
                    }
                } catch (err) {
                    console.error('Error loading more books:', err);
                } finally {
                    isLoading = false;
                    document.getElementById('loading').style.display = 'none';
                }
            }
        });

            document.querySelectorAll('details').forEach(details => {
            details.addEventListener('toggle', () => {
                const detailsRow = details.closest('tr').nextElementSibling;
                if (details.open) {
                    detailsRow.style.display = 'table-row';
                } else {
                    detailsRow.style.display = 'none';
                }
            });
        });


                       function appendBooks(books) {
            const tbody = document.querySelector('#booksTable tbody');
            books.forEach(book => {
                // Создаем строку с основными данными книги
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <details>
                            <summary class="btn btn-sm btn-outline-primary">Details</summary>
                        </details>
                    </td>
                    <td>${book.id}</td>
                    <td>${book.isbn}</td>
                    <td>${book.title}</td>
                    <td>${(book.author || []).map(a => `${a.name}`).join(', ')}</td>
                    <td>${book.publisher.name}</td>
                `;
                tbody.appendChild(row);

                // Создаем строку с деталями книги
                const detailsRow = document.createElement('tr');
                detailsRow.className = 'details-row';
                detailsRow.style.display = 'none'; // Скрываем детали по умолчанию
                detailsRow.innerHTML = `
                    <td colspan="6" class="p-4">
                        <div class="row mb-3">
                            <div class="col-md-3 d-flex flex-column align-items-start">
                                <img src="${book.image}" alt="Cover" style="max-width: 140px;" class="mb-2" />
                                <div style="margin-left:50px" class="bg-primary p-2 rounded-3 text-center">
                                    <i class="fa fa-thumbs-up text-white"></i> ${book.likes}
                                </div>
                            </div>
                            <div class="col-md-9">
                                <h3><strong>${book.title}</strong></h3>
                                <div><strong>by ${book.author.map(a => a.name).join(', ')}</strong></div>
                                <p>${book.publisher.name}, ${book.publisher.year}</p>
                                <div><strong>Reviews:</strong></div>
                                <ul>
                                    ${book.reviews.map(review => `<p>  ${review.text} <br/> &mdash; ${review.name}</p>`).join('')}
                                </ul>
                            </div>
                        </div>
                    </td>
                `;
                tbody.appendChild(detailsRow);

                // Устанавливаем обработчик события для открытия/закрытия деталей
                const details = row.querySelector('details');
                details.addEventListener('toggle', () => {
                    if (details.open) {
                        detailsRow.style.display = 'table-row'; // Показываем детали
                    } else {
                        detailsRow.style.display = 'none'; // Скрываем детали
                    }
                });
            });
        }

        function generateSeed() {
            const seed = Math.floor(Math.random() * 100000000);
            document.getElementById('seedInput').value = seed;
        }

                       function getFilterParams() {
            return {
                seed: document.getElementById('seedInput').value,
                likes: document.querySelector('input[name="likes"]').value,
                reviews: parseFloat(document.querySelector('input[name="reviews"]').value).toFixed(1),
                language: document.querySelector('select[name="language"]').value
            };
        }
    </script>

</body>


